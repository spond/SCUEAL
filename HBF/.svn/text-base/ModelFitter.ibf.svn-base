/*------------------------------------------------------*/function runAModel (specArray, branchOption){	logL     = 0;	fromSite = 0;	modelPartCount = Rows (specArray);	modelBLEstimates = {modelPartCount,3};		for (arrayID = 0; arrayID < modelPartCount; arrayID = arrayID+1)	{		toSite = specArray[arrayID][0];		node   = specArray[arrayID][1];		span   = Max(1,toSite-fromSite);				s2  = 2*treeS;		sh2 = node+treeS;				if (rvChoice > 0)		{			cspanMx = {siteRateClasses*span,1};						(prepNumericArray ["FILTER_ARRAYS"])[0] = (probMatrix["Values"])[cspanMx["_MATRIX_ELEMENT_ROW_$span*categoryShifter+s2*rawToUniqueMap[_MATRIX_ELEMENT_ROW_%span+fromSite]+node"]];			(prepNumericArray ["FILTER_ARRAYS"])[1] = (probMatrix["Values"])[cspanMx["_MATRIX_ELEMENT_ROW_$span*categoryShifter+s2*rawToUniqueMap[_MATRIX_ELEMENT_ROW_%span+fromSite]+sh2"]];			(prepNumericArray ["FILTER_ARRAYS"])[2] = sequenceProbArray		[cspanMx["_MATRIX_ELEMENT_ROW_%span+fromSite"]];						spanMx = {1,span};			prepNumericArray ["FILTER_FREQS"]  	    = spanMx["1"];		}		else		{			spanMx = {span,1};						(prepNumericArray ["FILTER_ARRAYS"])[0] = (probMatrix["Values"])[spanMx["s2*rawToUniqueMap[_MATRIX_ELEMENT_ROW_+fromSite__]+node"]];			(prepNumericArray ["FILTER_ARRAYS"])[1] = (probMatrix["Values"])[spanMx["s2*rawToUniqueMap[_MATRIX_ELEMENT_ROW_+fromSite__]+sh2"]];			(prepNumericArray ["FILTER_ARRAYS"])[2] = sequenceProbArray		[spanMx["_MATRIX_ELEMENT_ROW_+fromSite__"]];						prepNumericArray ["FILTER_FREQS"]  	    = (Transpose(spanMx))["1"];		}								global bbv = baseBranchValues[node];		if (branchOption == 1)		{			tryTree.Clade1.t = bbv/3;			tryTree.Clade2.t := bbv-tryTree.Clade1.t;			tryTree.Query.t  = bbv;		}		else		{			tryTree.Clade1.t = bbv/3;			tryTree.Clade2.t = bbv/3;			tryTree.Query.t  = bbv/3;		}		if (rvChoice > 0)		{			DataSetFilter numericFilter = CreateFilter (prepNumericArray,siteRateClasses);		}		else		{			DataSetFilter numericFilter = CreateFilter (prepNumericArray);		}		LikelihoodFunction numLF    = (numericFilter, tryTree);		VERBOSITY_LEVEL				= -1;		Optimize					  (res_lf,numLF);		modelBLEstimates[arrayID][0] = tryTree.Clade1.t;		modelBLEstimates[arrayID][1] = tryTree.Clade2.t;		modelBLEstimates[arrayID][2] = tryTree.Query.t;		fromSite = toSite;				logL = logL + res_lf[1][0];	}	return {{logL__,arrayID__*(3-branchOption__)}};}