function buildINodeLabel (aKey, aValue){	if (_bufferCount > 0)	{		if (Abs(simpleSubtype))		{			if (aKey[0] != simpleSubtype)			{				simpleSubtype = 0;			}		}		_bufferString * "/";	}	else	{		simpleSubtype = aKey[0];	}		_bufferCount = _bufferCount + 1;	_bufferString * aKey;	return 0;}function _doLabelGeneration (){	tc 		 = BranchCount (exportT);	_treeAVL = exportT	^ 0; 		_crfEquiv  = {};	_crfNodes  = {};	_pureNodes = {};		for (k=0; k < tc; k = k+1)	{		nodeName 	    = BranchName (exportT,k);		subtreeAVL	    = exportT[nodeName];		nodeNames	    = Rows(subtreeAVL);		crfType			= {};		pureType		= {};						for (k2 = 0; k2 < Abs (subtreeAVL); k2 = k2+1)		{			if (((nodeNames[k2]&&1)$"^NODE")[0] < 0)			{				localNodeName = nodeNames[k2]&&1;				thisLabel = sequenceLabels[localNodeName];								findunder = thisLabel $ "-";				thisLabel = thisLabel[0][findunder[0]-1];				fprintf (stdout, thisLabel, "\n");								if (thisLabel/"CRF*")				{					crfType  [thisLabel[3][Abs(thisLabel)-1]] = 1;					_crfNodes[localNodeName] = 1;				}				else				{					pureType [thisLabel] = 1;				}			}		}				_bufferString = ""; _bufferString * 128;		/* reduce CRF labels here */		_bufferCount = 0;				if (Abs(pureType) > 1)		{			pureType["buildINodeLabel"][""];			_bufferString * 0;		 	_bufferString * 128;		 				if (Abs(simpleSubtype))			{			 	 _bufferString * (simpleSubtype + "-ancestral");				_pureNodes [nodeName] = simpleSubtype;			}			else			{		 		/*fprintf (stdout, nodeName, ":", pureType, "/", simpleSubtype, "\n");*/			 	_bufferString * "U";						}						/*if (Abs (crfType))			{				_bufferCount = 0;				_bufferString * "/CRF";				crfType["buildINodeLabel"][""];			}*/		}		else		{			if (Abs(pureType) == 1)			{				nodeLabel = (Rows(pureType))[0];				_pureNodes [nodeName] = nodeLabel;			}			else			{				_bufferString * "CRF";				crfType["buildINodeLabel"][""];				_crfNodes[nodeName] = 1;			}		}		_bufferString * 0;		if (Abs(_bufferString))		{			sequenceLabels [nodeName&&1] = _bufferString;		}		else		{			sequenceLabels [nodeName&&1] = nodeLabel;		}	}		tc 		 = Abs (_treeAVL);		for (k = 1; k < tc; k = k+1)	{		if (_crfNodes[(_treeAVL[k])["Name"]])		{			pureEquiv = "";			parent = (_treeAVL[k])["Parent"];			while (parent)			{				if (Abs(_pureNodes[(_treeAVL[parent])["Name"]]))				{					pureEquiv = _pureNodes[(_treeAVL[parent])["Name"]];					break;				}				parent = (_treeAVL[parent])["Parent"];			}			if (Abs(pureEquiv))			{				_crfEquiv [(_treeAVL[k])["Name"]&&1] = pureEquiv;			}		}	}	return 0;}